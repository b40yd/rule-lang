
# 定义注释

# namespace if for rule after before continue block return let  in  range 等关键字，
#其中if 是逻辑判断， for range是循环迭代器， let 绑定局部变量， in 数组逻辑判断，rule after表示规则在谁的后面执行，rule before 表示在谁的前执行 。

global {
    host = "" # 全局变量
    blacklist = ['1.1.1.1', '2.2.2.2'] # ''或者""表示字符串， []表示数组, {} 表示hash字典
}

namespace access { # 命名空间,表示access空间中的规则
    rule attack { # 定义规则
        let a = "" # 定义局部变量
        if a == .host { # $访问全局变量， 条件语句， >= <= < > && || 逻辑计算， .访问内置变量或对象
            return block  # 规则结束返回 返回参数， block表示 后序规则不执行，continue 表示继续执行后续的规则
        }
        return continue
    }
    
    # 关键字after 和  beforce 表示 在 ... 之前和在 ... 之后执行的规则
    rule pii after attack { # 定义规则
        let a = "" # 定义局部变量
        if $host == .host { # $访问全局变量， 条件语句， >= <= < > && || 逻辑计算， .访问内置变量或对象
            return block  # 规则结束返回 返回参数， block表示 后序规则不执行，continue 表示继续执行后续的规则
        }

        if a in blacklist { # in 判断是否在数组中

        }

        for a range blacklist { # 支持for迭代器

        }
        return continue
    }
}

